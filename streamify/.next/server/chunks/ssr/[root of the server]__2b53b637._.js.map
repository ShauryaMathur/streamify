{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/shauryamathur/Documents/Spring%202025/CSE460-DMQL/Project/trackzy/streamify/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nexport const supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n)\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/shauryamathur/Documents/Spring%202025/CSE460-DMQL/Project/trackzy/streamify/lib/api.ts"],"sourcesContent":["import { supabase } from './supabase';\n\nexport interface AlbumTree {\n    album_id:   number\n    album:      string\n    artist:     string\n    tracks: {\n      track_id: number\n      name:     string\n      seconds:  number\n      price:    number\n    }[]\n  }\n  \n\nexport async function fetchAlbums(search: string) {\n    // empty string ⇒ no filter\n    const base = supabase.from('v_album_tree').select('*').order('artist')\n  \n    const { data, error } =\n      search.trim() === ''\n        ? await base\n        : await base.or(\n            `album.ilike.%${search}%,artist.ilike.%${search}%`\n          ) // ↙ case-insensitive\n  \n    if (error) throw error\n    return data\n  }\n\n  export async function checkout(items: number[]) {\n    // p_items is an array of {track_id,qty}\n    const payload = items.map((id) => ({ track_id: id, qty: 1 }))\n    // return the full response object\n    return supabase.rpc('f_checkout', {\n      p_customer: 1,\n      p_items: payload,\n    })\n  }\n\n  export type MonthlySale = { month: string; revenue: number }\nexport type TopTrack    = { track_id: number; name: string; units_sold: number }\n\nexport async function fetchSalesByMonth(): Promise<MonthlySale[]> {\n  const { data, error } = await supabase.rpc('f_sales_by_month')\n  if (error) throw error\n  return data!\n}\n\nexport async function fetchTopTracks(): Promise<TopTrack[]> {\n  const { data, error } = await supabase.rpc('f_top_tracks_sales')\n  if (error) throw error\n  return data!\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAeO,eAAe,YAAY,MAAc;IAC5C,2BAA2B;IAC3B,MAAM,OAAO,+GAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,gBAAgB,MAAM,CAAC,KAAK,KAAK,CAAC;IAE7D,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GACnB,OAAO,IAAI,OAAO,KACd,MAAM,OACN,MAAM,KAAK,EAAE,CACX,CAAC,aAAa,EAAE,OAAO,gBAAgB,EAAE,OAAO,CAAC,CAAC,EAClD,qBAAqB;;IAE7B,IAAI,OAAO,MAAM;IACjB,OAAO;AACT;AAEO,eAAe,SAAS,KAAe;IAC5C,wCAAwC;IACxC,MAAM,UAAU,MAAM,GAAG,CAAC,CAAC,KAAO,CAAC;YAAE,UAAU;YAAI,KAAK;QAAE,CAAC;IAC3D,kCAAkC;IAClC,OAAO,+GAAA,CAAA,WAAQ,CAAC,GAAG,CAAC,cAAc;QAChC,YAAY;QACZ,SAAS;IACX;AACF;AAKK,eAAe;IACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,+GAAA,CAAA,WAAQ,CAAC,GAAG,CAAC;IAC3C,IAAI,OAAO,MAAM;IACjB,OAAO;AACT;AAEO,eAAe;IACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,+GAAA,CAAA,WAAQ,CAAC,GAAG,CAAC;IAC3C,IAAI,OAAO,MAAM;IACjB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///Users/shauryamathur/Documents/Spring%202025/CSE460-DMQL/Project/trackzy/streamify/components/DashboardContent.tsx"],"sourcesContent":["'use client'\n\nimport { fetchSalesByMonth, fetchTopTracks } from '@/lib/api'\nimport { useQuery } from '@tanstack/react-query'\nimport {\n    Bar,\n    BarChart,\n    CartesianGrid,\n    Line,\n    LineChart,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from 'recharts'\n\nexport default function DashboardContent() {\n  // useQuery now only accepts one object argument in v5\n  const {\n    data: monthly = [],\n    isLoading: loadingM,\n    isError: errorM\n  } = useQuery({\n    queryKey: ['salesByMonth'],\n    queryFn: fetchSalesByMonth\n  })\n\n  const {\n    data: topTracks = [],\n    isLoading: loadingT,\n    isError: errorT\n  } = useQuery({\n    queryKey: ['topTracks'],\n    queryFn: fetchTopTracks\n  })\n\n  if (loadingM || loadingT) return <p>Loading charts…</p>\n  if (errorM || errorT) return <p className=\"text-red-600\">Failed to load data.</p>\n\n  return (\n    <div className=\"space-y-12\">\n      {/* Revenue Line Chart */}\n      <div className=\"bg-white p-4 shadow rounded-lg\">\n        <h2 className=\"mb-2 text-lg font-medium\">Revenue Over Time</h2>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={monthly}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"month\" />\n            <YAxis />\n            <Tooltip formatter={v => `$${v}`} />\n            <Line\n              type=\"monotone\"\n              dataKey=\"revenue\"\n              stroke=\"#6366F1\"\n              strokeWidth={2}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n\n      {/* Top Tracks Bar Chart */}\n      <div className=\"bg-white p-4 shadow rounded-lg\">\n        <h2 className=\"mb-2 text-lg font-medium\">\n          Top 10 Tracks by Units Sold\n        </h2>\n        <ResponsiveContainer width=\"100%\" height={300}>\n  <BarChart\n    data={topTracks}\n    layout=\"vertical\"\n    margin={{ top: 20, right: 30, left: 150, bottom: 20 }}  // ← give extra left-hand room\n  >\n    <CartesianGrid strokeDasharray=\"3 3\" />\n    <XAxis type=\"number\" />\n    <YAxis\n      type=\"category\"\n      dataKey=\"name\"\n      width={150}                // ← make the axis wide enough\n      interval={0}               // ← render every label, no skipping\n      tick={{ fontSize: 12 }}    // ← optional styling\n    />\n    <Tooltip />\n    <Bar dataKey=\"units_sold\" fill=\"#6366F1\" />\n  </BarChart>\n</ResponsiveContainer>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;;;;;AAgBe,SAAS;IACtB,sDAAsD;IACtD,MAAM,EACJ,MAAM,UAAU,EAAE,EAClB,WAAW,QAAQ,EACnB,SAAS,MAAM,EAChB,GAAG,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QACX,UAAU;YAAC;SAAe;QAC1B,SAAS,0GAAA,CAAA,oBAAiB;IAC5B;IAEA,MAAM,EACJ,MAAM,YAAY,EAAE,EACpB,WAAW,QAAQ,EACnB,SAAS,MAAM,EAChB,GAAG,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QACX,UAAU;YAAC;SAAY;QACvB,SAAS,0GAAA,CAAA,iBAAc;IACzB;IAEA,IAAI,YAAY,UAAU,qBAAO,8OAAC;kBAAE;;;;;;IACpC,IAAI,UAAU,QAAQ,qBAAO,8OAAC;QAAE,WAAU;kBAAe;;;;;;IAEzD,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA2B;;;;;;kCACzC,8OAAC,mKAAA,CAAA,sBAAmB;wBAAC,OAAM;wBAAO,QAAQ;kCACxC,cAAA,8OAAC,qJAAA,CAAA,YAAS;4BAAC,MAAM;;8CACf,8OAAC,6JAAA,CAAA,gBAAa;oCAAC,iBAAgB;;;;;;8CAC/B,8OAAC,qJAAA,CAAA,QAAK;oCAAC,SAAQ;;;;;;8CACf,8OAAC,qJAAA,CAAA,QAAK;;;;;8CACN,8OAAC,uJAAA,CAAA,UAAO;oCAAC,WAAW,CAAA,IAAK,CAAC,CAAC,EAAE,GAAG;;;;;;8CAChC,8OAAC,oJAAA,CAAA,OAAI;oCACH,MAAK;oCACL,SAAQ;oCACR,QAAO;oCACP,aAAa;;;;;;;;;;;;;;;;;;;;;;;0BAOrB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA2B;;;;;;kCAGzC,8OAAC,mKAAA,CAAA,sBAAmB;wBAAC,OAAM;wBAAO,QAAQ;kCAChD,cAAA,8OAAC,oJAAA,CAAA,WAAQ;4BACP,MAAM;4BACN,QAAO;4BACP,QAAQ;gCAAE,KAAK;gCAAI,OAAO;gCAAI,MAAM;gCAAK,QAAQ;4BAAG;;8CAEpD,8OAAC,6JAAA,CAAA,gBAAa;oCAAC,iBAAgB;;;;;;8CAC/B,8OAAC,qJAAA,CAAA,QAAK;oCAAC,MAAK;;;;;;8CACZ,8OAAC,qJAAA,CAAA,QAAK;oCACJ,MAAK;oCACL,SAAQ;oCACR,OAAO;oCACP,UAAU;oCACV,MAAM;wCAAE,UAAU;oCAAG;;;;;;8CAEvB,8OAAC,uJAAA,CAAA,UAAO;;;;;8CACR,8OAAC,mJAAA,CAAA,MAAG;oCAAC,SAAQ;oCAAa,MAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMnC","debugId":null}},
    {"offset": {"line": 327, "column": 0}, "map": {"version":3,"sources":["file:///Users/shauryamathur/Documents/Spring%202025/CSE460-DMQL/Project/trackzy/streamify/app/dashboard/page.tsx"],"sourcesContent":["// app/dashboard/page.tsx\n'use client'\n\nimport DashboardContent from '@/components/DashboardContent'\n\nexport default function DashboardPage() {\n  return (\n    <div className=\"mx-auto max-w-6xl p-6 space-y-8\">\n      <h1 className=\"text-2xl font-semibold\">📊 Sales Dashboard</h1>\n      <DashboardContent />\n    </div>\n  )\n}\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;;AAGzB;AAFA;;;AAIe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAyB;;;;;;0BACvC,8OAAC,+HAAA,CAAA,UAAgB;;;;;;;;;;;AAGvB","debugId":null}}]
}